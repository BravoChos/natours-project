/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/
/* 
This allows us basically to start clean, 
without the brower adding any margins or paddings,
that we don't want to our elements 
*/
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit; }

html {
  /* normally its 16px, so if you want to set root font size to 10px
    then multiply .625 which is 10 / 16 */
  font-size: 62.5%; }

/* 1 rem is exactly the root font size */
body {
  font-family: 'lato', sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  line-height: 1.7;
  color: #777;
  /* 30px=>3rem */
  padding: 3rem;
  box-sizing: border-box; }

/* header si the origin, parent of logo-box */
.header {
  /* evey point, the height of this box, of this element,
    should be 95%of the viewport height */
  height: 95vh;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  /* cover: whatever the width of the viewport, or the element,
    it's always try to fit the element inside of the box */
  background-size: cover;
  background-position: top;
  position: relative;
  clip-path: polygon(0 0, 100% 0, 100% 75%, 0 100%);
  /* these 40% and 60%, thery are in relation to the parent element */ }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__logo:hover {
    animation: moveInRight 1s ease-out; }
  .header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    /* background-color: red; */
    /* if it's text we want it to be at the center
        of this box, all we have to do is to set the text box, 
        with the following */
    text-align: center; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /* This backface-visibility property determines
    if the back part of the element when we transform it
    is visible or hidden for the user. It fixes 'SHAKING' */
  backface-visibility: hidden;
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 700;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1s;
    /* try ease-in too. look for mdn */
    animation-timing-function: ease-out;
    /* animation-iteration-count: 3;
        animation-delay: 3s; */ }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 1s ease-out; }

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  /* 60% {
        transform: rotate(180deg);
    } */
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

.btn {
  /* #pseudo-class link are a special state of a selector. 
    so this links here is a state of the button selector
    when it is an anchor element so it functions as a link */
  /* this minus one pixel is in relation to the initial state, 
    so to the link state, not to the hover.*/
  /* And pseudo-elements allow us to style certain parts of elements.
    For example, the after pseudo-element that we're 
    gonna use adds like a virtual element right after the element that we're selecting.
    And we can then style that element. */ }
  .btn:link, .btn:visited {
    text-transform: uppercase;
    /* get rid of blue color */
    text-decoration: none;
    padding: 1.5rem 4rem;
    /* this way the box model works on this element as if
        was just a normal block element */
    display: inline-block;
    border-radius: 10rem;
    transition: all .2s;
    position: relative;
    font-size: 1.6rem; }
  .btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); }
    .btn:hover::after {
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0; }
  .btn:active {
    transform: translateY(-1px);
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }
  .btn--white {
    background-color: #fff;
    color: #777; }
    .btn--white::after {
      background-color: #fff; }
  .btn::after {
    content: '';
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    /* And the reference is the first element
        with the relative position that it can find. 
        we do not want to be the header*/
    position: absolute;
    top: 0;
    left: 0;
    /* So remember the z index defines the position
        of the elements if they are one on top of another.
        And so this one has minus one and so it's definitely behind the button.*/
    z-index: -1;
    transition: all .4s; }
  .btn--animated {
    animation: moveInBottom .5s ease-out .75s;
    /* what this does, is that it will automatically apply
        the styles up to zero percent before the animation starts. */
    animation-fill-mode: backwards; }
